import Head from "next/head";
import styles from "../styles/Home.module.css";
import styled, { keyframes, css } from "styled-components";
import { useState } from "react";

const Leaf = styled.div`
  ${(props) => {
    if (props.children === "*") {
      return `
        font-size:50px;
        width: 10px;
        height: 20px;
        padding: 4px;
        display: flex;
        color: ${props.color};
        justify-content: center;
        align-items: center;
        &:hover{
          transition:0.3s all;
          cursor:pointer;
          font-size:70px;
          -webkit-text-stroke: 2px #ffdc73;
        }
  `;
    } else {
      return `
        width: 10px;
        height: 20px;
        padding: 4px;
        display: flex;
        color: ${props.color};
        justify-content: center;
        align-items: center;`;
    }
  }}
  &:hover {
    ${(props) => {
      if (props.children === "^") {
        return `  background: rgb(3, 120, 20);
    border-radius: 10px;
    cursor: pointer;`;
      }
    }}
  }
`;
export default function Home() {
  const START = 1;
  const END = 40;
  let treeMap: number[][] = [];
  for (let i = 0; i <= END / 2; i++) {
    treeMap.push([]);
  }
  for (let i = START; i < END; i += 2) {
    let mok = Math.floor(i / 2) + 1;
    for (let j = 0; j < (END - i) / 2; j++) {
      treeMap[mok].push(0);
    }

    for (let j = 0; j < i; j++) {
      if (i === 1) {
        treeMap[mok].push(1);
      } else {
        treeMap[mok].push(2);
      }
    }
  }
  const base: number[] = [];
  for (let i = 0; i < END / 2; i++) {
    base.push(0);
  }
  base.push(3);
  base.push(3);
  for (let i = 0; i < 4; i++) {
    treeMap.push(base);
  }
  const [tree, setTree] = useState(treeMap);
  //test code
  treeMap[7][20] = 4;
  treeMap[7][23] = 5;
  treeMap[9][17] = 5;
  treeMap[11][20] = 6;
  treeMap[14][13] = 7;
  //testcode

  const mapRender = (val: number) => {
    switch (val) {
      case 0:
        return " ";
      case 1:
        return "*";
      case 2:
        return "^";
      case 3:
        return "|";
      case 4:
        return "o";
      case 5:
        return "#";
      case 6:
        return "&";
      case 7:
        return "@";
      case 8:
        return "+";
    }
  };
  const makeRandomColor = (val: number) => {
    switch (val) {
      case 0:
        return "silver";
      case 1:
        return "red";
      case 2:
        return "blue";
      case 3:
        return "gold";
      case 4:
        return "orange";
      case 5:
        return "purple";
    }
  };
  const mapColorRender = (val: number) => {
    switch (val) {
      case 0:
        return;
      case 1:
        return "gold";
      case 2:
        return "rgb(0,179,61)";
      case 3:
        return "rgb(109,83,62)";
      default:
        const color = makeRandomColor(Math.floor(Math.random() * 5));
        return color;
    }
  };

  return (
    <>
      <Head>
        <title>CHRISTMAS</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.main}>
        <div style={{ margin: "30px" }}></div>
        <div
          style={{
            width: "500px",
            borderRadius: "20px",
            padding: "20px",
            color: "white",
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
          }}
        >
          <div
            className="message"
            style={{
              display: "flex",
              flexDirection: "column",
              alignItems: "center",
              marginBottom: "40px",
              fontSize: "14px",
            }}
          >
            <div>ðŸŽ„ MERRY CRHISTMAS ðŸŽ„</div>
            <div>AND</div>
            <div>HAPPY NEW YEAR</div>
          </div>
          <div
            className="tree"
            style={{
              display: "flex",
              flexDirection: "column",
              justifyContent: "center",
            }}
          >
            {tree.map((row, rowIdx) => {
              const rowKey = `row_${rowIdx}`;
              return (
                <div
                  key={rowKey}
                  style={{
                    display: "flex",
                  }}
                >
                  {row.map((col, colIdx) => {
                    const colKey = `col_${colIdx}`;
                    return (
                      <Leaf
                        key={colKey}
                        color={mapColorRender(col)}
                        onClick={() => {
                          if (col === 2) {
                            const rn = Math.floor(Math.random() * 4) + 4;
                            let temp = [...tree];
                            temp[rowIdx][colIdx] = rn;
                            setTree(temp);
                          }
                        }}
                      >
                        {mapRender(col)}
                      </Leaf>
                      // <div
                      //   className={styles.treeCol}
                      //   key={colKey}
                      //   style={{
                      //     width: "10px",
                      //     height: "20px",
                      //     padding: "4px",
                      //     display: "flex",
                      //     color: mapColorRender(col),
                      //     justifyContent: "center",
                      //     alignItems: "center",
                      //   }}
                      // >
                      //   {mapRender(col)}
                      // </div>
                    );
                  })}
                </div>
              );
            })}
          </div>
          {/* <div className="messages">
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
              <p>ì•ˆë…•í•˜ì„¸ìš”</p>
            </div> */}
        </div>
      </div>
    </>
  );
}
